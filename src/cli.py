import enum
import click
import os
from typing import Optional
import numpy as np

from bias_handler import BiasDMHandlerContext, EABMHandler, MABMHandler, SABMHandler
from utils import create_example_data, load_json, save_json, validate_data


class BiasDMHandlerMethod(enum.Enum):
    EABM = (enum.auto(),)
    MABM = (enum.auto(),)
    SABM = (enum.auto(),)


def print_results(
    results: dict,
    data: dict,
    verbose: bool = False,
) -> None:
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    click.echo("\n" + "=" * 60)
    click.echo("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    click.echo("=" * 60)

    if verbose:
        # 1. –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        click.echo(f"\nüìä –ú–ê–¢–†–ò–¶–ê –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•:")
        scores_array = np.array(results["scores"])
        click.echo(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {scores_array.shape}")
        for i, dm in enumerate(data["dms"]):
            click.echo(f"   {dm['id']}:\n   {results['scores'][i]}")

        # 2. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        click.echo(f"\nüîÑ –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ú–ê–¢–†–ò–¶–ê:")
        norm_scores_array = np.array(results["normalized_scores"])
        for i, dm in enumerate(data["dms"]):
            click.echo(f"   {dm['id']}:\n   {norm_scores_array[i]}")

        # 3. –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        click.echo(f"\nüìê –î–û–í–ï–†–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´:")
        for i, dm in enumerate(data["dms"]):
            ci = results["CIs"][i]
            status = "üö´" if i in results["biased_indices"] else "‚úÖ"
            click.echo(
                f"   {status} {dm['id']}: [{ci['LB']:.5f}, {ci['UB']:.5f}] | –¥–ª–∏–Ω–∞: {ci['length']:.5f}"
            )

        # 4. –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
        click.echo(f"\nüìä –ò–ù–î–ï–ö–°–´ –ü–†–ï–î–í–ó–Ø–¢–û–°–¢–ò (B_i):")
        for i, dm in enumerate(data["dms"]):
            status = "üö´ –ü–†–ï–î–í–ó–Ø–¢" if i in results["biased_indices"] else "‚úÖ –ù–û–†–ú–ê"
            click.echo(f"   {dm['id']}: {results['B_i'][i]:.5f} | {status}")

        # 5. –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ DM
        click.echo(f"\nüóëÔ∏è  –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï DM (–ü–†–ï–î–í–ó–Ø–¢–´–ï):")
        if results["biased_indices"]:
            for idx in results["biased_indices"]:
                click.echo(f"   ‚ùå {data['dms'][idx]['id']} (–∏–Ω–¥–µ–∫—Å: {idx})")
        else:
            click.echo("   ‚úÖ –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö DM")

        # 6. –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ébiased DM)
        if "overlap_matrix" in results and len(results["overlap_matrix"]) > 0:
            click.echo(f"\nüîÑ –ú–ê–¢–†–ò–¶–ê –ü–ï–†–ï–ö–†–´–¢–ò–ô:")
            overlap_matrix = np.array(results["overlap_matrix"])
            click.echo(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {overlap_matrix.shape}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ébiased DM –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
            unbiased_dms = [
                dm
                for i, dm in enumerate(data["dms"])
                if i in results["unbiased_indices"]
            ]

            if unbiased_dms:
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                header = "  " + "".join([f"{dm['id']:>10}" for dm in unbiased_dms])
                click.echo(header)
                click.echo("-" * (len(unbiased_dms) * 10 + 5))

                # –î–∞–Ω–Ω—ã–µ
                for i, dm in enumerate(unbiased_dms):
                    row = f"{dm['id']:>3} "
                    for j in range(len(unbiased_dms)):
                        row += f"{overlap_matrix[i][j]:>10.5f}"
                    click.echo(row)

        # 7. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è O_i
        if "O_i" in results and len(results["O_i"]) > 0:
            click.echo(f"\nüéØ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ö–†–´–¢–ò–Ø (O_i):")
            unbiased_dms = [
                dm
                for i, dm in enumerate(data["dms"])
                if i not in results["biased_indices"]
            ]
            for i, dm in enumerate(unbiased_dms):
                click.echo(f"   {dm['id']}: {results['O_i'][i]:.5f}")

        # 8. –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è O_tilde
        if "O_tilde" in results and len(results["O_tilde"]) > 0:
            click.echo(f"\nüìè –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ü–ï–†–ï–ö–†–´–¢–ò–Ø (O_tilde):")
            unbiased_dms = [
                dm
                for i, dm in enumerate(data["dms"])
                if i not in results["biased_indices"]
            ]
            for i, dm in enumerate(unbiased_dms):
                click.echo(f"   {dm['id']}: {results['O_tilde'][i]:.5f}")

        # 9. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if "CI_tilde" in results and len(results["CI_tilde"]) > 0:
            click.echo(f"\nüìê –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –î–û–í–ï–†–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–¢–ï–†–í–ê–õ–´ (CI_tilde):")
            unbiased_dms = [
                dm
                for i, dm in enumerate(data["dms"])
                if i not in results["biased_indices"]
            ]
            for i, dm in enumerate(unbiased_dms):
                click.echo(f"   {dm['id']}: {results['CI_tilde'][i]:.5f}")

    click.echo(f"\n‚öñÔ∏è  –§–ò–ù–ê–õ–¨–ù–´–ï –í–ï–°–ê:")
    total_weight = 0
    weights = results["final_weights"]
    for i, dm in enumerate(data["dms"]):
        status = "üö´ –ò–°–ö–õ–Æ–ß–ï–ù" if i in results["biased_indices"] else "‚úÖ –£–ß–ê–°–¢–í–£–ï–¢"
        click.echo(f"   {dm['id']}: {weights[i]:.5f} | {status}")
        total_weight += weights[i]

    click.echo(f"\nüìà –°—É–º–º–∞ –≤–µ—Å–æ–≤: {total_weight:.5f}")


def save_json_results(
    results: dict,
    data: dict,
    alpha: float,
    b_threshold: int,
    gamma: float,
    input_file: str,
    output_file="results.json",
):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    out_results = {
        "parameters": {
            "alpha": alpha,
            "B_threshold": b_threshold,
            "gamma": gamma,
            "input_file": input_file,
            "output_file": output_file,
        },
        "results": {
            "scores": {
                data["dms"][i]["id"]: results["scores"].tolist()[i]
                for i in range(len(results["scores"]))
            },
            "normalized_scores": {
                data["dms"][i]["id"]: results["normalized_scores"].tolist()[i]
                for i in range(len(results["normalized_scores"]))
            },
            "CIs": {
                data["dms"][i]["id"]: {
                    "mean": float(ci["mean"]),
                    "std": float(ci["std"]),
                    "lower_bound": float(ci["LB"]),
                    "upper_bound": float(ci["UB"]),
                    "length": float(ci["length"]),
                }
                for i, ci in enumerate(results["CIs"])
            },
            "biasedness_index": {
                data["dms"][i]["id"]: float(b) for i, b in enumerate(results["B_i"])
            },
            "biased_indices": {
                data["dms"][i]["id"]: i for i in results["biased_indices"]
            },
            "unbiased_indices": {
                data["dms"][i]["id"]: i for i in results["unbiased_indices"]
            },
            "overlap_matrix": {
                data["dms"][idx]["id"]: [
                    float(val) for val in results["overlap_matrix"][i]
                ]
                for i, idx in enumerate(results["unbiased_indices"])
            },
            "total_overlap": {
                data["dms"][idx]["id"]: float(results["total_overlap"][i])
                for i, idx in enumerate(results["unbiased_indices"])
            },
            "O_i": {
                data["dms"][idx]["id"]: float(results["O_i"][i])
                for i, idx in enumerate(results["unbiased_indices"])
            },
            "O_tilde": {
                data["dms"][idx]["id"]: float(results["O_tilde"][i])
                for i, idx in enumerate(results["unbiased_indices"])
            },
            "CI_tilde": {
                data["dms"][idx]["id"]: float(results["CI_tilde"][i])
                for i, idx in enumerate(results["unbiased_indices"])
            },
            "final_weights": {
                data["dms"][i]["id"]: float(fw)
                for i, fw in enumerate(results["final_weights"])
            },
        },
    }

    if save_json(out_results, output_file):
        click.echo(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")


@click.group()
def cli():
    """üéØ Anti-Biased Group Decision Making Framework

    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
    """
    pass


@cli.command()
@click.option(
    "--method",
    "-m",
    type=click.Choice(BiasDMHandlerMethod, case_sensitive=False),
    default=BiasDMHandlerMethod.EABM,
    help="–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç—ã—Ö DM",
    show_default=True,
)
@click.option(
    "--file",
    "-f",
    default="example_data.json",
    help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    show_default=True,
)
@click.option(
    "--alpha",
    "-a",
    type=click.FloatRange(0.9, 0.99),
    help="–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
    show_default=True,
)
@click.option(
    "-B",
    "--B_threshold",
    type=int,
    help="–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è DM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: I-1)",
    show_default=True,
)
@click.option(
    "-g",
    "--gamma",
    type=click.FloatRange(0.0, 1.0),
    help="–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∏ –≤–µ—Å–∞ DM –≤ –æ–±—â–µ–º –≤–µ—Å–µ",
    show_default=True,
)
@click.option(
    "--output",
    "-o",
    help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results_<input_file>.json)",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def analyze(
    method: BiasDMHandlerMethod,
    file: str,
    alpha: float,
    b_threshold: Optional[int],
    gamma: Optional[float],
    output: str,
    verbose: bool,
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∑—è—Ç—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    if file == "example_data.json":
        example_data = create_example_data()
        try:
            save_json(example_data, "example_data.json")
            verbose and click.echo("‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            click.echo(e)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(file):
        click.echo(f"‚ùå –§–∞–π–ª {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", err=True)
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        data = load_json(file)
        verbose and click.echo("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        validate_data(data)
        verbose and click.echo("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    except Exception as e:
        click.echo(e)
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
    if alpha is None:
        alpha = data.get("parameters", {}).get("alpha", 0.95)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
    if b_threshold is None:
        b_threshold = data.get("parameters", {}).get("B", len(data["dms"]) - 1)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ–ª–∏ DM –≤ –æ–±—â–µ–º –≤–µ—Å–µ
    if gamma is None:
        gamma = data.get("parameters", {}).get("gamma", 0.5)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if output is None:
        base_name = os.path.splitext(os.path.basename(file))[0]
        output = f"{method.name}_results_{base_name}.json"

    if verbose:
        click.echo("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        click.echo(f"* –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏: {method.name}")
        click.echo(f"* –§–∞–π–ª –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {file}")
        click.echo(f"* –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (a): {alpha}")
        click.echo(f"* –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ (B): {b_threshold}")
        click.echo(f"* –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∏ DM –≤ –æ–±—â–µ–º –≤–µ—Å–µ (gamma): {gamma}")
        click.echo(f"* –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    context = None
    match method:
        case BiasDMHandlerMethod.EABM:
            context = BiasDMHandlerContext(
                EABMHandler(), data, alpha, b_threshold, gamma
            )
        case BiasDMHandlerMethod.MABM:
            context = BiasDMHandlerContext(
                MABMHandler(), data, alpha, b_threshold, gamma
            )
        case BiasDMHandlerMethod.SABM:
            context = BiasDMHandlerContext(
                SABMHandler(), data, alpha, b_threshold, gamma
            )
        case _:
            click.echo("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ DM", err=True)
            return

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∏–∑ BiasDMHandlerMethod
    click.echo(f"\nüîÑ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é {method.name} –º–µ—Ç–æ–¥–∞...")
    results = context.handle(context, True)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_results(results, data, verbose)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    try:
        save_json_results(results, data, alpha, b_threshold, gamma, file, output)
        verbose and click.echo(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output}")
    except Exception as e:
        click.echo(e)
        return

    click.echo("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


@cli.command()
@click.option(
    "--file",
    "-f",
    default="example_data.json",
    help="–§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
    show_default=True,
)
def validate(file: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    if not os.path.exists(file):
        click.echo(f"‚ùå –§–∞–π–ª {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", err=True)
        return

    try:
        data = load_json(file)
        if data and validate_data(data):
            click.echo("üéâ –§–∞–π–ª –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            click.echo("‚ùå –§–∞–π–ª –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!", err=True)
    except Exception as e:
        click.echo(e, err=True)


@cli.command()
def info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    click.echo("üéØ Anti-Biased Group Decision Making Framework")
    click.echo("=" * 50)
    click.echo("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    click.echo("   –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
    click.echo("\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    click.echo("   analyze        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É")
    click.echo("   validate       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    click.echo("   info           - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    click.echo("   --help           - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    click.echo("\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    click.echo("   python ./src/main.py analyze")
    click.echo("   python ./src/main.py analyze -m eabm --verbose")
    click.echo(
        "   python ./src/main.py analyze -m eabm -f my_data.json --alpha 0.9 -B 2"
    )
    click.echo("   python ./src/main.py validate")
    click.echo("   python ./src/main.py validate -f my_data.json")
