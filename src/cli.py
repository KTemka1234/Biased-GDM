import enum
import click
import os
from typing import Optional, Dict, List
import numpy as np

from bias_handler import BiasDMHandlerContext, EABMHandler, MABMHandler, SABMHandler
from utils import create_example_data, load_json, save_json, validate_data


class BiasDMHandlerMethod(enum.Enum):
    EABM = enum.auto(),
    MABM = enum.auto(),
    SABM = enum.auto(),
    

def print_results(
    weights: List[float],
    biased_indices: List[int],
    B_i: np.ndarray,
    CIs: List[Dict],
    data: Dict,
) -> None:
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    click.echo("\n" + "=" * 60)
    click.echo("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    click.echo("=" * 60)

    click.echo(f"\nüìä –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ (B_i):")
    for i, dm in enumerate(data["dms"]):
        status = "üö´ –ü–†–ï–î–í–ó–Ø–¢" if i in biased_indices else "‚úÖ –ù–û–†–ú–ê"
        click.echo(f"   {dm['id']}: {B_i[i]:.2f} | {status}")

    click.echo(f"\nüóëÔ∏è  –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ DM (–ø—Ä–µ–¥–≤–∑—è—Ç—ã–µ):")
    if biased_indices:
        for idx in biased_indices:
            click.echo(f"   ‚ùå {data['dms'][idx]['id']}")
    else:
        click.echo("   ‚úÖ –ù–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö DM")

    click.echo(f"\n‚öñÔ∏è  –§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞:")
    total_weight = 0
    for i, dm in enumerate(data["dms"]):
        status = "üö´ –ò–°–ö–õ–Æ–ß–ï–ù" if i in biased_indices else "‚úÖ –£–ß–ê–°–¢–í–£–ï–¢"
        click.echo(f"   {dm['id']}: {weights[i]:.4f} | {status}")
        total_weight += weights[i]

    click.echo(f"\nüìê –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã:")
    for i, dm in enumerate(data["dms"]):
        ci = CIs[i]
        status = "üö´" if i in biased_indices else "‚úÖ"
        click.echo(
            f"   {status} {dm['id']}: [{ci['LB']:.4f}, {ci['UB']:.4f}] | –¥–ª–∏–Ω–∞: {ci['length']:.4f}"
        )

    click.echo(f"\nüìà –°—É–º–º–∞ –≤–µ—Å–æ–≤: {total_weight:.6f}")


@click.group()
def cli():
    """üéØ Anti-Biased Group Decision Making Framework

    –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
    """
    pass


@cli.command()
@click.option(
    "--method",
    "-m",
    type=click.Choice(
        BiasDMHandlerMethod, case_sensitive=False
    ),
    default=BiasDMHandlerMethod.EABM,
    help="–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç—ã—Ö DM",
    show_default=True,
)
@click.option(
    "--file",
    "-f",
    default="example_data.json",
    help="–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    show_default=True,
)
@click.option(
    "--alpha",
    type=click.FloatRange(0.9, 0.99),
    help="–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤",
    show_default=True,
)
@click.option(
    "-B",
    "--B_threshold",
    type=int,
    help="–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è DM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: I-1)",
)
@click.option(
    "--output",
    "-o",
    help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: results_<input_file>.json)",
)
@click.option("--verbose", "-v", is_flag=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
def analyze(
    method: BiasDMHandlerMethod,
    file: str,
    alpha: float,
    b_threshold: Optional[int],
    output: str,
    verbose: bool,
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∑—è—Ç—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    if file == "example_data.json":
        example_data = create_example_data()
        try:
            save_json(example_data, "example_data.json")
            verbose and click.echo("‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            click.echo(e)
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists(file):
        click.echo(f"‚ùå –§–∞–π–ª {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", err=True)
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        data = load_json(file)
        verbose and click.echo("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        validate_data(data)
        verbose and click.echo("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    except Exception as e:
        click.echo(e)
        return

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è
    if alpha is None:
        alpha = data.get("parameters", {}).get("alpha", 0.95)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏
    if b_threshold is None:
        b_threshold = data.get("parameters", {}).get("B", len(data["dms"]) - 1)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if output is None:
        base_name = os.path.splitext(os.path.basename(file))[0]
        output = f"results_{base_name}.json"

    if verbose:
        click.echo("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        click.echo(f"* –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏: {method.name}")
        click.echo(f"* –§–∞–π–ª –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {file}")
        click.echo(f"* –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è (a): {alpha}")
        click.echo(f"* –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ (B): {b_threshold}")
        click.echo(f"* –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    context = None
    match method:
        case BiasDMHandlerMethod.EABM:
            context = BiasDMHandlerContext(EABMHandler(), data, alpha, b_threshold)
        case BiasDMHandlerMethod.MABM:
            context = BiasDMHandlerContext(MABMHandler(), data, alpha, b_threshold)
        case BiasDMHandlerMethod.SABM:
            context = BiasDMHandlerContext(SABMHandler(), data, alpha, b_threshold)
        case _:
            click.echo("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ DM", err=True)
            return
            
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ EABM –º–µ—Ç–æ–¥–∞
    click.echo(f"\nüîÑ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é {method.name} –º–µ—Ç–æ–¥–∞...")
    weights, biased_indices, B_i, CIs = context.handle(context)

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print_results(weights, biased_indices, B_i, CIs, data)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {
        "parameters": {"alpha": alpha, "B_threshold": b_threshold, "input_file": file},
        "weights": {
            data["dms"][i]["id"]: float(weights[i]) for i in range(len(weights))
        },
        "biased_dms": [data["dms"][i]["id"] for i in biased_indices],
        "biasedness_index": {
            data["dms"][i]["id"]: float(B_i[i]) for i in range(len(B_i))
        },
        "confidence_intervals": {
            data["dms"][i]["id"]: {
                "lower_bound": float(CIs[i]["LB"]),
                "upper_bound": float(CIs[i]["UB"]),
                "length": float(CIs[i]["length"]),
            }
            for i in range(len(CIs))
        },
    }

    if save_json(results, output):
        click.echo(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output}")

    click.echo("\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


@cli.command()
@click.option(
    "--file",
    "-f",
    default="example_data.json",
    help="–§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
    show_default=True,
)
def validate(file: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    if not os.path.exists(file):
        click.echo(f"‚ùå –§–∞–π–ª {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", err=True)
        return

    try:
        data = load_json(file)
        if data and validate_data(data):
            click.echo("üéâ –§–∞–π–ª –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            click.echo("‚ùå –§–∞–π–ª –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!", err=True)
    except Exception as e:
        click.echo(e, err=True)


@cli.command()
def info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    click.echo("üéØ Anti-Biased Group Decision Making Framework")
    click.echo("=" * 50)
    click.echo("üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    click.echo("   –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
    click.echo("\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    click.echo("   analyze        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É")
    click.echo("   validate       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    click.echo("   info           - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
    click.echo("   help           - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    click.echo("\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    click.echo("   python ./src/main.py analyze -m eabm --verbose")
    click.echo("   python ./src/main.py analyze -m eabm -f my_data.json --alpha 0.9 -B 2")
    click.echo("   python ./src/main.py validate")
    click.echo("   python ./src/main.py validate -f my_data.json")
